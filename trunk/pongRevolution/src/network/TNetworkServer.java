/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package network;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TNetworkServer {

  public interface Iface {

    public TSettings getSettings(String username) throws TException;

    public void pickTeam(TPlayer preferred, String username, boolean join) throws TException;

    public void sendChat(String message, String username) throws TException;

    public void moveLeft(TPlayer requester) throws TException;

    public void moveRight(TPlayer requester) throws TException;

    public void usePowerUp(TPlayer requester) throws TException;

    public void jump(TPlayer requester) throws TException;

  }

  public interface AsyncIface {

    public void getSettings(String username, AsyncMethodCallback<AsyncClient.getSettings_call> resultHandler) throws TException;

    public void pickTeam(TPlayer preferred, String username, boolean join, AsyncMethodCallback<AsyncClient.pickTeam_call> resultHandler) throws TException;

    public void sendChat(String message, String username, AsyncMethodCallback<AsyncClient.sendChat_call> resultHandler) throws TException;

    public void moveLeft(TPlayer requester, AsyncMethodCallback<AsyncClient.moveLeft_call> resultHandler) throws TException;

    public void moveRight(TPlayer requester, AsyncMethodCallback<AsyncClient.moveRight_call> resultHandler) throws TException;

    public void usePowerUp(TPlayer requester, AsyncMethodCallback<AsyncClient.usePowerUp_call> resultHandler) throws TException;

    public void jump(TPlayer requester, AsyncMethodCallback<AsyncClient.jump_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public TSettings getSettings(String username) throws TException
    {
      send_getSettings(username);
      return recv_getSettings();
    }

    public void send_getSettings(String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSettings", TMessageType.CALL, ++seqid_));
      getSettings_args args = new getSettings_args();
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TSettings recv_getSettings() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSettings failed: out of sequence response");
      }
      getSettings_result result = new getSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSettings failed: unknown result");
    }

    public void pickTeam(TPlayer preferred, String username, boolean join) throws TException
    {
      send_pickTeam(preferred, username, join);
    }

    public void send_pickTeam(TPlayer preferred, String username, boolean join) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("pickTeam", TMessageType.CALL, ++seqid_));
      pickTeam_args args = new pickTeam_args();
      args.setPreferred(preferred);
      args.setUsername(username);
      args.setJoin(join);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void sendChat(String message, String username) throws TException
    {
      send_sendChat(message, username);
    }

    public void send_sendChat(String message, String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendChat", TMessageType.CALL, ++seqid_));
      sendChat_args args = new sendChat_args();
      args.setMessage(message);
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void moveLeft(TPlayer requester) throws TException
    {
      send_moveLeft(requester);
    }

    public void send_moveLeft(TPlayer requester) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("moveLeft", TMessageType.CALL, ++seqid_));
      moveLeft_args args = new moveLeft_args();
      args.setRequester(requester);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void moveRight(TPlayer requester) throws TException
    {
      send_moveRight(requester);
    }

    public void send_moveRight(TPlayer requester) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("moveRight", TMessageType.CALL, ++seqid_));
      moveRight_args args = new moveRight_args();
      args.setRequester(requester);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void usePowerUp(TPlayer requester) throws TException
    {
      send_usePowerUp(requester);
    }

    public void send_usePowerUp(TPlayer requester) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("usePowerUp", TMessageType.CALL, ++seqid_));
      usePowerUp_args args = new usePowerUp_args();
      args.setRequester(requester);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void jump(TPlayer requester) throws TException
    {
      send_jump(requester);
    }

    public void send_jump(TPlayer requester) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("jump", TMessageType.CALL, ++seqid_));
      jump_args args = new jump_args();
      args.setRequester(requester);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSettings(String username, AsyncMethodCallback<getSettings_call> resultHandler) throws TException {
      checkReady();
      getSettings_call method_call = new getSettings_call(username, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getSettings_call extends TAsyncMethodCall {
      private String username;
      public getSettings_call(String username, AsyncMethodCallback<getSettings_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getSettings", TMessageType.CALL, 0));
        getSettings_args args = new getSettings_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSettings getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSettings();
      }
    }

    public void pickTeam(TPlayer preferred, String username, boolean join, AsyncMethodCallback<pickTeam_call> resultHandler) throws TException {
      checkReady();
      pickTeam_call method_call = new pickTeam_call(preferred, username, join, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class pickTeam_call extends TAsyncMethodCall {
      private TPlayer preferred;
      private String username;
      private boolean join;
      public pickTeam_call(TPlayer preferred, String username, boolean join, AsyncMethodCallback<pickTeam_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.preferred = preferred;
        this.username = username;
        this.join = join;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("pickTeam", TMessageType.CALL, 0));
        pickTeam_args args = new pickTeam_args();
        args.setPreferred(preferred);
        args.setUsername(username);
        args.setJoin(join);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendChat(String message, String username, AsyncMethodCallback<sendChat_call> resultHandler) throws TException {
      checkReady();
      sendChat_call method_call = new sendChat_call(message, username, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class sendChat_call extends TAsyncMethodCall {
      private String message;
      private String username;
      public sendChat_call(String message, String username, AsyncMethodCallback<sendChat_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.message = message;
        this.username = username;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("sendChat", TMessageType.CALL, 0));
        sendChat_args args = new sendChat_args();
        args.setMessage(message);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void moveLeft(TPlayer requester, AsyncMethodCallback<moveLeft_call> resultHandler) throws TException {
      checkReady();
      moveLeft_call method_call = new moveLeft_call(requester, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class moveLeft_call extends TAsyncMethodCall {
      private TPlayer requester;
      public moveLeft_call(TPlayer requester, AsyncMethodCallback<moveLeft_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requester = requester;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("moveLeft", TMessageType.CALL, 0));
        moveLeft_args args = new moveLeft_args();
        args.setRequester(requester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void moveRight(TPlayer requester, AsyncMethodCallback<moveRight_call> resultHandler) throws TException {
      checkReady();
      moveRight_call method_call = new moveRight_call(requester, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class moveRight_call extends TAsyncMethodCall {
      private TPlayer requester;
      public moveRight_call(TPlayer requester, AsyncMethodCallback<moveRight_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requester = requester;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("moveRight", TMessageType.CALL, 0));
        moveRight_args args = new moveRight_args();
        args.setRequester(requester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void usePowerUp(TPlayer requester, AsyncMethodCallback<usePowerUp_call> resultHandler) throws TException {
      checkReady();
      usePowerUp_call method_call = new usePowerUp_call(requester, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class usePowerUp_call extends TAsyncMethodCall {
      private TPlayer requester;
      public usePowerUp_call(TPlayer requester, AsyncMethodCallback<usePowerUp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requester = requester;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("usePowerUp", TMessageType.CALL, 0));
        usePowerUp_args args = new usePowerUp_args();
        args.setRequester(requester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void jump(TPlayer requester, AsyncMethodCallback<jump_call> resultHandler) throws TException {
      checkReady();
      jump_call method_call = new jump_call(requester, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class jump_call extends TAsyncMethodCall {
      private TPlayer requester;
      public jump_call(TPlayer requester, AsyncMethodCallback<jump_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requester = requester;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("jump", TMessageType.CALL, 0));
        jump_args args = new jump_args();
        args.setRequester(requester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getSettings", new getSettings());
      processMap_.put("pickTeam", new pickTeam());
      processMap_.put("sendChat", new sendChat());
      processMap_.put("moveLeft", new moveLeft());
      processMap_.put("moveRight", new moveRight());
      processMap_.put("usePowerUp", new usePowerUp());
      processMap_.put("jump", new jump());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSettings_args args = new getSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSettings_result result = new getSettings_result();
        result.success = iface_.getSettings(args.username);
        oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class pickTeam implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        pickTeam_args args = new pickTeam_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("pickTeam", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.pickTeam(args.preferred, args.username, args.join);
        return;
      }
    }

    private class sendChat implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendChat_args args = new sendChat_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendChat", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.sendChat(args.message, args.username);
        return;
      }
    }

    private class moveLeft implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        moveLeft_args args = new moveLeft_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("moveLeft", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.moveLeft(args.requester);
        return;
      }
    }

    private class moveRight implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        moveRight_args args = new moveRight_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("moveRight", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.moveRight(args.requester);
        return;
      }
    }

    private class usePowerUp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        usePowerUp_args args = new usePowerUp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("usePowerUp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.usePowerUp(args.requester);
        return;
      }
    }

    private class jump implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        jump_args args = new jump_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("jump", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.jump(args.requester);
        return;
      }
    }

  }

  public static class getSettings_args implements TBase<getSettings_args, getSettings_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettings_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);

    public String username;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSettings_args.class, metaDataMap);
    }

    public getSettings_args() {
    }

    public getSettings_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_args(getSettings_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getSettings_args deepCopy() {
      return new getSettings_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getSettings_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been asigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_args)
        return this.equals((getSettings_args)that);
      return false;
    }

    public boolean equals(getSettings_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSettings_args typedOther = (getSettings_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettings_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSettings_result implements TBase<getSettings_result, getSettings_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettings_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public TSettings success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TSettings.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSettings_result.class, metaDataMap);
    }

    public getSettings_result() {
    }

    public getSettings_result(
      TSettings success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_result(getSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSettings(other.success);
      }
    }

    public getSettings_result deepCopy() {
      return new getSettings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSettings getSuccess() {
      return this.success;
    }

    public getSettings_result setSuccess(TSettings success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSettings)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_result)
        return this.equals((getSettings_result)that);
      return false;
    }

    public boolean equals(getSettings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSettings_result typedOther = (getSettings_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TSettings();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class pickTeam_args implements TBase<pickTeam_args, pickTeam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("pickTeam_args");

    private static final TField PREFERRED_FIELD_DESC = new TField("preferred", TType.I32, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);
    private static final TField JOIN_FIELD_DESC = new TField("join", TType.BOOL, (short)3);

    /**
     * 
     * @see TPlayer
     */
    public TPlayer preferred;
    public String username;
    public boolean join;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see TPlayer
       */
      PREFERRED((short)1, "preferred"),
      USERNAME((short)2, "username"),
      JOIN((short)3, "join");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFERRED
            return PREFERRED;
          case 2: // USERNAME
            return USERNAME;
          case 3: // JOIN
            return JOIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __JOIN_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFERRED, new FieldMetaData("preferred", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, TPlayer.class)));
      tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.JOIN, new FieldMetaData("join", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(pickTeam_args.class, metaDataMap);
    }

    public pickTeam_args() {
    }

    public pickTeam_args(
      TPlayer preferred,
      String username,
      boolean join)
    {
      this();
      this.preferred = preferred;
      this.username = username;
      this.join = join;
      setJoinIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pickTeam_args(pickTeam_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetPreferred()) {
        this.preferred = other.preferred;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      this.join = other.join;
    }

    public pickTeam_args deepCopy() {
      return new pickTeam_args(this);
    }

    @Override
    public void clear() {
      this.preferred = null;
      this.username = null;
      setJoinIsSet(false);
      this.join = false;
    }

    /**
     * 
     * @see TPlayer
     */
    public TPlayer getPreferred() {
      return this.preferred;
    }

    /**
     * 
     * @see TPlayer
     */
    public pickTeam_args setPreferred(TPlayer preferred) {
      this.preferred = preferred;
      return this;
    }

    public void unsetPreferred() {
      this.preferred = null;
    }

    /** Returns true if field preferred is set (has been asigned a value) and false otherwise */
    public boolean isSetPreferred() {
      return this.preferred != null;
    }

    public void setPreferredIsSet(boolean value) {
      if (!value) {
        this.preferred = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public pickTeam_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been asigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean isJoin() {
      return this.join;
    }

    public pickTeam_args setJoin(boolean join) {
      this.join = join;
      setJoinIsSet(true);
      return this;
    }

    public void unsetJoin() {
      __isset_bit_vector.clear(__JOIN_ISSET_ID);
    }

    /** Returns true if field join is set (has been asigned a value) and false otherwise */
    public boolean isSetJoin() {
      return __isset_bit_vector.get(__JOIN_ISSET_ID);
    }

    public void setJoinIsSet(boolean value) {
      __isset_bit_vector.set(__JOIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFERRED:
        if (value == null) {
          unsetPreferred();
        } else {
          setPreferred((TPlayer)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case JOIN:
        if (value == null) {
          unsetJoin();
        } else {
          setJoin((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFERRED:
        return getPreferred();

      case USERNAME:
        return getUsername();

      case JOIN:
        return new Boolean(isJoin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFERRED:
        return isSetPreferred();
      case USERNAME:
        return isSetUsername();
      case JOIN:
        return isSetJoin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pickTeam_args)
        return this.equals((pickTeam_args)that);
      return false;
    }

    public boolean equals(pickTeam_args that) {
      if (that == null)
        return false;

      boolean this_present_preferred = true && this.isSetPreferred();
      boolean that_present_preferred = true && that.isSetPreferred();
      if (this_present_preferred || that_present_preferred) {
        if (!(this_present_preferred && that_present_preferred))
          return false;
        if (!this.preferred.equals(that.preferred))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_join = true;
      boolean that_present_join = true;
      if (this_present_join || that_present_join) {
        if (!(this_present_join && that_present_join))
          return false;
        if (this.join != that.join)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pickTeam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pickTeam_args typedOther = (pickTeam_args)other;

      lastComparison = Boolean.valueOf(isSetPreferred()).compareTo(typedOther.isSetPreferred());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreferred()) {
        lastComparison = TBaseHelper.compareTo(this.preferred, typedOther.preferred);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJoin()).compareTo(typedOther.isSetJoin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJoin()) {
        lastComparison = TBaseHelper.compareTo(this.join, typedOther.join);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // PREFERRED
            if (field.type == TType.I32) {
              this.preferred = TPlayer.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // JOIN
            if (field.type == TType.BOOL) {
              this.join = iprot.readBool();
              setJoinIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.preferred != null) {
        oprot.writeFieldBegin(PREFERRED_FIELD_DESC);
        oprot.writeI32(this.preferred.getValue());
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOIN_FIELD_DESC);
      oprot.writeBool(this.join);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pickTeam_args(");
      boolean first = true;

      sb.append("preferred:");
      if (this.preferred == null) {
        sb.append("null");
      } else {
        sb.append(this.preferred);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("join:");
      sb.append(this.join);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChat_args implements TBase<sendChat_args, sendChat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChat_args");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);

    public String message;
    public String username;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MESSAGE((short)1, "message"),
      USERNAME((short)2, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(sendChat_args.class, metaDataMap);
    }

    public sendChat_args() {
    }

    public sendChat_args(
      String message,
      String username)
    {
      this();
      this.message = message;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChat_args(sendChat_args other) {
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public sendChat_args deepCopy() {
      return new sendChat_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
      this.username = null;
    }

    public String getMessage() {
      return this.message;
    }

    public sendChat_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been asigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public sendChat_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been asigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChat_args)
        return this.equals((sendChat_args)that);
      return false;
    }

    public boolean equals(sendChat_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendChat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendChat_args typedOther = (sendChat_args)other;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MESSAGE
            if (field.type == TType.STRING) {
              this.message = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(this.message);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendChat_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class moveLeft_args implements TBase<moveLeft_args, moveLeft_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("moveLeft_args");

    private static final TField REQUESTER_FIELD_DESC = new TField("requester", TType.I32, (short)1);

    /**
     * 
     * @see TPlayer
     */
    public TPlayer requester;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see TPlayer
       */
      REQUESTER((short)1, "requester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new FieldMetaData("requester", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, TPlayer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(moveLeft_args.class, metaDataMap);
    }

    public moveLeft_args() {
    }

    public moveLeft_args(
      TPlayer requester)
    {
      this();
      this.requester = requester;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveLeft_args(moveLeft_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
    }

    public moveLeft_args deepCopy() {
      return new moveLeft_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
    }

    /**
     * 
     * @see TPlayer
     */
    public TPlayer getRequester() {
      return this.requester;
    }

    /**
     * 
     * @see TPlayer
     */
    public moveLeft_args setRequester(TPlayer requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been asigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((TPlayer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveLeft_args)
        return this.equals((moveLeft_args)that);
      return false;
    }

    public boolean equals(moveLeft_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(moveLeft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      moveLeft_args typedOther = (moveLeft_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUESTER
            if (field.type == TType.I32) {
              this.requester = TPlayer.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requester != null) {
        oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
        oprot.writeI32(this.requester.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveLeft_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class moveRight_args implements TBase<moveRight_args, moveRight_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("moveRight_args");

    private static final TField REQUESTER_FIELD_DESC = new TField("requester", TType.I32, (short)1);

    /**
     * 
     * @see TPlayer
     */
    public TPlayer requester;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see TPlayer
       */
      REQUESTER((short)1, "requester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new FieldMetaData("requester", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, TPlayer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(moveRight_args.class, metaDataMap);
    }

    public moveRight_args() {
    }

    public moveRight_args(
      TPlayer requester)
    {
      this();
      this.requester = requester;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveRight_args(moveRight_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
    }

    public moveRight_args deepCopy() {
      return new moveRight_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
    }

    /**
     * 
     * @see TPlayer
     */
    public TPlayer getRequester() {
      return this.requester;
    }

    /**
     * 
     * @see TPlayer
     */
    public moveRight_args setRequester(TPlayer requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been asigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((TPlayer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveRight_args)
        return this.equals((moveRight_args)that);
      return false;
    }

    public boolean equals(moveRight_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(moveRight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      moveRight_args typedOther = (moveRight_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUESTER
            if (field.type == TType.I32) {
              this.requester = TPlayer.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requester != null) {
        oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
        oprot.writeI32(this.requester.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveRight_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class usePowerUp_args implements TBase<usePowerUp_args, usePowerUp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("usePowerUp_args");

    private static final TField REQUESTER_FIELD_DESC = new TField("requester", TType.I32, (short)1);

    /**
     * 
     * @see TPlayer
     */
    public TPlayer requester;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see TPlayer
       */
      REQUESTER((short)1, "requester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new FieldMetaData("requester", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, TPlayer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(usePowerUp_args.class, metaDataMap);
    }

    public usePowerUp_args() {
    }

    public usePowerUp_args(
      TPlayer requester)
    {
      this();
      this.requester = requester;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public usePowerUp_args(usePowerUp_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
    }

    public usePowerUp_args deepCopy() {
      return new usePowerUp_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
    }

    /**
     * 
     * @see TPlayer
     */
    public TPlayer getRequester() {
      return this.requester;
    }

    /**
     * 
     * @see TPlayer
     */
    public usePowerUp_args setRequester(TPlayer requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been asigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((TPlayer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof usePowerUp_args)
        return this.equals((usePowerUp_args)that);
      return false;
    }

    public boolean equals(usePowerUp_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(usePowerUp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      usePowerUp_args typedOther = (usePowerUp_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUESTER
            if (field.type == TType.I32) {
              this.requester = TPlayer.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requester != null) {
        oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
        oprot.writeI32(this.requester.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("usePowerUp_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class jump_args implements TBase<jump_args, jump_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("jump_args");

    private static final TField REQUESTER_FIELD_DESC = new TField("requester", TType.I32, (short)1);

    /**
     * 
     * @see TPlayer
     */
    public TPlayer requester;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see TPlayer
       */
      REQUESTER((short)1, "requester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new FieldMetaData("requester", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, TPlayer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(jump_args.class, metaDataMap);
    }

    public jump_args() {
    }

    public jump_args(
      TPlayer requester)
    {
      this();
      this.requester = requester;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public jump_args(jump_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
    }

    public jump_args deepCopy() {
      return new jump_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
    }

    /**
     * 
     * @see TPlayer
     */
    public TPlayer getRequester() {
      return this.requester;
    }

    /**
     * 
     * @see TPlayer
     */
    public jump_args setRequester(TPlayer requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been asigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((TPlayer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jump_args)
        return this.equals((jump_args)that);
      return false;
    }

    public boolean equals(jump_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jump_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jump_args typedOther = (jump_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUESTER
            if (field.type == TType.I32) {
              this.requester = TPlayer.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requester != null) {
        oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
        oprot.writeI32(this.requester.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jump_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
