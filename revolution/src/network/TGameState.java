/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package network;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TGameState implements TBase<TGameState, TGameState._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TGameState");

  private static final TField PADDLES_FIELD_DESC = new TField("paddles", TType.LIST, (short)1);
  private static final TField BALLS_FIELD_DESC = new TField("balls", TType.LIST, (short)2);
  private static final TField RED_SCORE_FIELD_DESC = new TField("redScore", TType.I32, (short)3);
  private static final TField BLUE_SCORE_FIELD_DESC = new TField("blueScore", TType.I32, (short)4);
  private static final TField SPAWNING_FIELD_DESC = new TField("spawning", TType.I32, (short)5);
  private static final TField OUT_FIELD_DESC = new TField("out", TType.LIST, (short)6);
  private static final TField COLLISIONS_FIELD_DESC = new TField("collisions", TType.LIST, (short)7);
  private static final TField CONNECTIONS_FIELD_DESC = new TField("connections", TType.LIST, (short)8);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.LIST, (short)9);

  public List<TPaddle> paddles;
  public List<TBall> balls;
  public int redScore;
  public int blueScore;
  public int spawning;
  public List<TBall> out;
  public List<TCollision> collisions;
  public List<TPosition> connections;
  public List<String> message;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PADDLES((short)1, "paddles"),
    BALLS((short)2, "balls"),
    RED_SCORE((short)3, "redScore"),
    BLUE_SCORE((short)4, "blueScore"),
    SPAWNING((short)5, "spawning"),
    OUT((short)6, "out"),
    COLLISIONS((short)7, "collisions"),
    CONNECTIONS((short)8, "connections"),
    MESSAGE((short)9, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PADDLES
          return PADDLES;
        case 2: // BALLS
          return BALLS;
        case 3: // RED_SCORE
          return RED_SCORE;
        case 4: // BLUE_SCORE
          return BLUE_SCORE;
        case 5: // SPAWNING
          return SPAWNING;
        case 6: // OUT
          return OUT;
        case 7: // COLLISIONS
          return COLLISIONS;
        case 8: // CONNECTIONS
          return CONNECTIONS;
        case 9: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REDSCORE_ISSET_ID = 0;
  private static final int __BLUESCORE_ISSET_ID = 1;
  private static final int __SPAWNING_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PADDLES, new FieldMetaData("paddles", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TPaddle.class))));
    tmpMap.put(_Fields.BALLS, new FieldMetaData("balls", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TBall.class))));
    tmpMap.put(_Fields.RED_SCORE, new FieldMetaData("redScore", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BLUE_SCORE, new FieldMetaData("blueScore", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SPAWNING, new FieldMetaData("spawning", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.OUT, new FieldMetaData("out", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TBall.class))));
    tmpMap.put(_Fields.COLLISIONS, new FieldMetaData("collisions", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TCollision.class))));
    tmpMap.put(_Fields.CONNECTIONS, new FieldMetaData("connections", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TPosition.class))));
    tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TGameState.class, metaDataMap);
  }

  public TGameState() {
  }

  public TGameState(
    List<TPaddle> paddles,
    List<TBall> balls,
    int redScore,
    int blueScore,
    int spawning,
    List<TBall> out,
    List<TCollision> collisions,
    List<TPosition> connections,
    List<String> message)
  {
    this();
    this.paddles = paddles;
    this.balls = balls;
    this.redScore = redScore;
    setRedScoreIsSet(true);
    this.blueScore = blueScore;
    setBlueScoreIsSet(true);
    this.spawning = spawning;
    setSpawningIsSet(true);
    this.out = out;
    this.collisions = collisions;
    this.connections = connections;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGameState(TGameState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPaddles()) {
      List<TPaddle> __this__paddles = new ArrayList<TPaddle>();
      for (TPaddle other_element : other.paddles) {
        __this__paddles.add(new TPaddle(other_element));
      }
      this.paddles = __this__paddles;
    }
    if (other.isSetBalls()) {
      List<TBall> __this__balls = new ArrayList<TBall>();
      for (TBall other_element : other.balls) {
        __this__balls.add(new TBall(other_element));
      }
      this.balls = __this__balls;
    }
    this.redScore = other.redScore;
    this.blueScore = other.blueScore;
    this.spawning = other.spawning;
    if (other.isSetOut()) {
      List<TBall> __this__out = new ArrayList<TBall>();
      for (TBall other_element : other.out) {
        __this__out.add(new TBall(other_element));
      }
      this.out = __this__out;
    }
    if (other.isSetCollisions()) {
      List<TCollision> __this__collisions = new ArrayList<TCollision>();
      for (TCollision other_element : other.collisions) {
        __this__collisions.add(new TCollision(other_element));
      }
      this.collisions = __this__collisions;
    }
    if (other.isSetConnections()) {
      List<TPosition> __this__connections = new ArrayList<TPosition>();
      for (TPosition other_element : other.connections) {
        __this__connections.add(new TPosition(other_element));
      }
      this.connections = __this__connections;
    }
    if (other.isSetMessage()) {
      List<String> __this__message = new ArrayList<String>();
      for (String other_element : other.message) {
        __this__message.add(other_element);
      }
      this.message = __this__message;
    }
  }

  public TGameState deepCopy() {
    return new TGameState(this);
  }

  @Override
  public void clear() {
    this.paddles = null;
    this.balls = null;
    setRedScoreIsSet(false);
    this.redScore = 0;
    setBlueScoreIsSet(false);
    this.blueScore = 0;
    setSpawningIsSet(false);
    this.spawning = 0;
    this.out = null;
    this.collisions = null;
    this.connections = null;
    this.message = null;
  }

  public int getPaddlesSize() {
    return (this.paddles == null) ? 0 : this.paddles.size();
  }

  public java.util.Iterator<TPaddle> getPaddlesIterator() {
    return (this.paddles == null) ? null : this.paddles.iterator();
  }

  public void addToPaddles(TPaddle elem) {
    if (this.paddles == null) {
      this.paddles = new ArrayList<TPaddle>();
    }
    this.paddles.add(elem);
  }

  public List<TPaddle> getPaddles() {
    return this.paddles;
  }

  public TGameState setPaddles(List<TPaddle> paddles) {
    this.paddles = paddles;
    return this;
  }

  public void unsetPaddles() {
    this.paddles = null;
  }

  /** Returns true if field paddles is set (has been asigned a value) and false otherwise */
  public boolean isSetPaddles() {
    return this.paddles != null;
  }

  public void setPaddlesIsSet(boolean value) {
    if (!value) {
      this.paddles = null;
    }
  }

  public int getBallsSize() {
    return (this.balls == null) ? 0 : this.balls.size();
  }

  public java.util.Iterator<TBall> getBallsIterator() {
    return (this.balls == null) ? null : this.balls.iterator();
  }

  public void addToBalls(TBall elem) {
    if (this.balls == null) {
      this.balls = new ArrayList<TBall>();
    }
    this.balls.add(elem);
  }

  public List<TBall> getBalls() {
    return this.balls;
  }

  public TGameState setBalls(List<TBall> balls) {
    this.balls = balls;
    return this;
  }

  public void unsetBalls() {
    this.balls = null;
  }

  /** Returns true if field balls is set (has been asigned a value) and false otherwise */
  public boolean isSetBalls() {
    return this.balls != null;
  }

  public void setBallsIsSet(boolean value) {
    if (!value) {
      this.balls = null;
    }
  }

  public int getRedScore() {
    return this.redScore;
  }

  public TGameState setRedScore(int redScore) {
    this.redScore = redScore;
    setRedScoreIsSet(true);
    return this;
  }

  public void unsetRedScore() {
    __isset_bit_vector.clear(__REDSCORE_ISSET_ID);
  }

  /** Returns true if field redScore is set (has been asigned a value) and false otherwise */
  public boolean isSetRedScore() {
    return __isset_bit_vector.get(__REDSCORE_ISSET_ID);
  }

  public void setRedScoreIsSet(boolean value) {
    __isset_bit_vector.set(__REDSCORE_ISSET_ID, value);
  }

  public int getBlueScore() {
    return this.blueScore;
  }

  public TGameState setBlueScore(int blueScore) {
    this.blueScore = blueScore;
    setBlueScoreIsSet(true);
    return this;
  }

  public void unsetBlueScore() {
    __isset_bit_vector.clear(__BLUESCORE_ISSET_ID);
  }

  /** Returns true if field blueScore is set (has been asigned a value) and false otherwise */
  public boolean isSetBlueScore() {
    return __isset_bit_vector.get(__BLUESCORE_ISSET_ID);
  }

  public void setBlueScoreIsSet(boolean value) {
    __isset_bit_vector.set(__BLUESCORE_ISSET_ID, value);
  }

  public int getSpawning() {
    return this.spawning;
  }

  public TGameState setSpawning(int spawning) {
    this.spawning = spawning;
    setSpawningIsSet(true);
    return this;
  }

  public void unsetSpawning() {
    __isset_bit_vector.clear(__SPAWNING_ISSET_ID);
  }

  /** Returns true if field spawning is set (has been asigned a value) and false otherwise */
  public boolean isSetSpawning() {
    return __isset_bit_vector.get(__SPAWNING_ISSET_ID);
  }

  public void setSpawningIsSet(boolean value) {
    __isset_bit_vector.set(__SPAWNING_ISSET_ID, value);
  }

  public int getOutSize() {
    return (this.out == null) ? 0 : this.out.size();
  }

  public java.util.Iterator<TBall> getOutIterator() {
    return (this.out == null) ? null : this.out.iterator();
  }

  public void addToOut(TBall elem) {
    if (this.out == null) {
      this.out = new ArrayList<TBall>();
    }
    this.out.add(elem);
  }

  public List<TBall> getOut() {
    return this.out;
  }

  public TGameState setOut(List<TBall> out) {
    this.out = out;
    return this;
  }

  public void unsetOut() {
    this.out = null;
  }

  /** Returns true if field out is set (has been asigned a value) and false otherwise */
  public boolean isSetOut() {
    return this.out != null;
  }

  public void setOutIsSet(boolean value) {
    if (!value) {
      this.out = null;
    }
  }

  public int getCollisionsSize() {
    return (this.collisions == null) ? 0 : this.collisions.size();
  }

  public java.util.Iterator<TCollision> getCollisionsIterator() {
    return (this.collisions == null) ? null : this.collisions.iterator();
  }

  public void addToCollisions(TCollision elem) {
    if (this.collisions == null) {
      this.collisions = new ArrayList<TCollision>();
    }
    this.collisions.add(elem);
  }

  public List<TCollision> getCollisions() {
    return this.collisions;
  }

  public TGameState setCollisions(List<TCollision> collisions) {
    this.collisions = collisions;
    return this;
  }

  public void unsetCollisions() {
    this.collisions = null;
  }

  /** Returns true if field collisions is set (has been asigned a value) and false otherwise */
  public boolean isSetCollisions() {
    return this.collisions != null;
  }

  public void setCollisionsIsSet(boolean value) {
    if (!value) {
      this.collisions = null;
    }
  }

  public int getConnectionsSize() {
    return (this.connections == null) ? 0 : this.connections.size();
  }

  public java.util.Iterator<TPosition> getConnectionsIterator() {
    return (this.connections == null) ? null : this.connections.iterator();
  }

  public void addToConnections(TPosition elem) {
    if (this.connections == null) {
      this.connections = new ArrayList<TPosition>();
    }
    this.connections.add(elem);
  }

  public List<TPosition> getConnections() {
    return this.connections;
  }

  public TGameState setConnections(List<TPosition> connections) {
    this.connections = connections;
    return this;
  }

  public void unsetConnections() {
    this.connections = null;
  }

  /** Returns true if field connections is set (has been asigned a value) and false otherwise */
  public boolean isSetConnections() {
    return this.connections != null;
  }

  public void setConnectionsIsSet(boolean value) {
    if (!value) {
      this.connections = null;
    }
  }

  public int getMessageSize() {
    return (this.message == null) ? 0 : this.message.size();
  }

  public java.util.Iterator<String> getMessageIterator() {
    return (this.message == null) ? null : this.message.iterator();
  }

  public void addToMessage(String elem) {
    if (this.message == null) {
      this.message = new ArrayList<String>();
    }
    this.message.add(elem);
  }

  public List<String> getMessage() {
    return this.message;
  }

  public TGameState setMessage(List<String> message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been asigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PADDLES:
      if (value == null) {
        unsetPaddles();
      } else {
        setPaddles((List<TPaddle>)value);
      }
      break;

    case BALLS:
      if (value == null) {
        unsetBalls();
      } else {
        setBalls((List<TBall>)value);
      }
      break;

    case RED_SCORE:
      if (value == null) {
        unsetRedScore();
      } else {
        setRedScore((Integer)value);
      }
      break;

    case BLUE_SCORE:
      if (value == null) {
        unsetBlueScore();
      } else {
        setBlueScore((Integer)value);
      }
      break;

    case SPAWNING:
      if (value == null) {
        unsetSpawning();
      } else {
        setSpawning((Integer)value);
      }
      break;

    case OUT:
      if (value == null) {
        unsetOut();
      } else {
        setOut((List<TBall>)value);
      }
      break;

    case COLLISIONS:
      if (value == null) {
        unsetCollisions();
      } else {
        setCollisions((List<TCollision>)value);
      }
      break;

    case CONNECTIONS:
      if (value == null) {
        unsetConnections();
      } else {
        setConnections((List<TPosition>)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PADDLES:
      return getPaddles();

    case BALLS:
      return getBalls();

    case RED_SCORE:
      return new Integer(getRedScore());

    case BLUE_SCORE:
      return new Integer(getBlueScore());

    case SPAWNING:
      return new Integer(getSpawning());

    case OUT:
      return getOut();

    case COLLISIONS:
      return getCollisions();

    case CONNECTIONS:
      return getConnections();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PADDLES:
      return isSetPaddles();
    case BALLS:
      return isSetBalls();
    case RED_SCORE:
      return isSetRedScore();
    case BLUE_SCORE:
      return isSetBlueScore();
    case SPAWNING:
      return isSetSpawning();
    case OUT:
      return isSetOut();
    case COLLISIONS:
      return isSetCollisions();
    case CONNECTIONS:
      return isSetConnections();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGameState)
      return this.equals((TGameState)that);
    return false;
  }

  public boolean equals(TGameState that) {
    if (that == null)
      return false;

    boolean this_present_paddles = true && this.isSetPaddles();
    boolean that_present_paddles = true && that.isSetPaddles();
    if (this_present_paddles || that_present_paddles) {
      if (!(this_present_paddles && that_present_paddles))
        return false;
      if (!this.paddles.equals(that.paddles))
        return false;
    }

    boolean this_present_balls = true && this.isSetBalls();
    boolean that_present_balls = true && that.isSetBalls();
    if (this_present_balls || that_present_balls) {
      if (!(this_present_balls && that_present_balls))
        return false;
      if (!this.balls.equals(that.balls))
        return false;
    }

    boolean this_present_redScore = true;
    boolean that_present_redScore = true;
    if (this_present_redScore || that_present_redScore) {
      if (!(this_present_redScore && that_present_redScore))
        return false;
      if (this.redScore != that.redScore)
        return false;
    }

    boolean this_present_blueScore = true;
    boolean that_present_blueScore = true;
    if (this_present_blueScore || that_present_blueScore) {
      if (!(this_present_blueScore && that_present_blueScore))
        return false;
      if (this.blueScore != that.blueScore)
        return false;
    }

    boolean this_present_spawning = true;
    boolean that_present_spawning = true;
    if (this_present_spawning || that_present_spawning) {
      if (!(this_present_spawning && that_present_spawning))
        return false;
      if (this.spawning != that.spawning)
        return false;
    }

    boolean this_present_out = true && this.isSetOut();
    boolean that_present_out = true && that.isSetOut();
    if (this_present_out || that_present_out) {
      if (!(this_present_out && that_present_out))
        return false;
      if (!this.out.equals(that.out))
        return false;
    }

    boolean this_present_collisions = true && this.isSetCollisions();
    boolean that_present_collisions = true && that.isSetCollisions();
    if (this_present_collisions || that_present_collisions) {
      if (!(this_present_collisions && that_present_collisions))
        return false;
      if (!this.collisions.equals(that.collisions))
        return false;
    }

    boolean this_present_connections = true && this.isSetConnections();
    boolean that_present_connections = true && that.isSetConnections();
    if (this_present_connections || that_present_connections) {
      if (!(this_present_connections && that_present_connections))
        return false;
      if (!this.connections.equals(that.connections))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TGameState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TGameState typedOther = (TGameState)other;

    lastComparison = Boolean.valueOf(isSetPaddles()).compareTo(typedOther.isSetPaddles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaddles()) {
      lastComparison = TBaseHelper.compareTo(this.paddles, typedOther.paddles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalls()).compareTo(typedOther.isSetBalls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalls()) {
      lastComparison = TBaseHelper.compareTo(this.balls, typedOther.balls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedScore()).compareTo(typedOther.isSetRedScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedScore()) {
      lastComparison = TBaseHelper.compareTo(this.redScore, typedOther.redScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlueScore()).compareTo(typedOther.isSetBlueScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlueScore()) {
      lastComparison = TBaseHelper.compareTo(this.blueScore, typedOther.blueScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpawning()).compareTo(typedOther.isSetSpawning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpawning()) {
      lastComparison = TBaseHelper.compareTo(this.spawning, typedOther.spawning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOut()).compareTo(typedOther.isSetOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOut()) {
      lastComparison = TBaseHelper.compareTo(this.out, typedOther.out);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollisions()).compareTo(typedOther.isSetCollisions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollisions()) {
      lastComparison = TBaseHelper.compareTo(this.collisions, typedOther.collisions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnections()).compareTo(typedOther.isSetConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnections()) {
      lastComparison = TBaseHelper.compareTo(this.connections, typedOther.connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PADDLES
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.paddles = new ArrayList<TPaddle>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                TPaddle _elem6;
                _elem6 = new TPaddle();
                _elem6.read(iprot);
                this.paddles.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BALLS
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.balls = new ArrayList<TBall>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                TBall _elem9;
                _elem9 = new TBall();
                _elem9.read(iprot);
                this.balls.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RED_SCORE
          if (field.type == TType.I32) {
            this.redScore = iprot.readI32();
            setRedScoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BLUE_SCORE
          if (field.type == TType.I32) {
            this.blueScore = iprot.readI32();
            setBlueScoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SPAWNING
          if (field.type == TType.I32) {
            this.spawning = iprot.readI32();
            setSpawningIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // OUT
          if (field.type == TType.LIST) {
            {
              TList _list10 = iprot.readListBegin();
              this.out = new ArrayList<TBall>(_list10.size);
              for (int _i11 = 0; _i11 < _list10.size; ++_i11)
              {
                TBall _elem12;
                _elem12 = new TBall();
                _elem12.read(iprot);
                this.out.add(_elem12);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // COLLISIONS
          if (field.type == TType.LIST) {
            {
              TList _list13 = iprot.readListBegin();
              this.collisions = new ArrayList<TCollision>(_list13.size);
              for (int _i14 = 0; _i14 < _list13.size; ++_i14)
              {
                TCollision _elem15;
                _elem15 = new TCollision();
                _elem15.read(iprot);
                this.collisions.add(_elem15);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CONNECTIONS
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.connections = new ArrayList<TPosition>(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                TPosition _elem18;
                _elem18 = new TPosition();
                _elem18.read(iprot);
                this.connections.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MESSAGE
          if (field.type == TType.LIST) {
            {
              TList _list19 = iprot.readListBegin();
              this.message = new ArrayList<String>(_list19.size);
              for (int _i20 = 0; _i20 < _list19.size; ++_i20)
              {
                String _elem21;
                _elem21 = iprot.readString();
                this.message.add(_elem21);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.paddles != null) {
      oprot.writeFieldBegin(PADDLES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.paddles.size()));
        for (TPaddle _iter22 : this.paddles)
        {
          _iter22.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.balls != null) {
      oprot.writeFieldBegin(BALLS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.balls.size()));
        for (TBall _iter23 : this.balls)
        {
          _iter23.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RED_SCORE_FIELD_DESC);
    oprot.writeI32(this.redScore);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BLUE_SCORE_FIELD_DESC);
    oprot.writeI32(this.blueScore);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPAWNING_FIELD_DESC);
    oprot.writeI32(this.spawning);
    oprot.writeFieldEnd();
    if (this.out != null) {
      oprot.writeFieldBegin(OUT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.out.size()));
        for (TBall _iter24 : this.out)
        {
          _iter24.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.collisions != null) {
      oprot.writeFieldBegin(COLLISIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.collisions.size()));
        for (TCollision _iter25 : this.collisions)
        {
          _iter25.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.connections != null) {
      oprot.writeFieldBegin(CONNECTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.connections.size()));
        for (TPosition _iter26 : this.connections)
        {
          _iter26.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.message.size()));
        for (String _iter27 : this.message)
        {
          oprot.writeString(_iter27);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGameState(");
    boolean first = true;

    sb.append("paddles:");
    if (this.paddles == null) {
      sb.append("null");
    } else {
      sb.append(this.paddles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balls:");
    if (this.balls == null) {
      sb.append("null");
    } else {
      sb.append(this.balls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redScore:");
    sb.append(this.redScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blueScore:");
    sb.append(this.blueScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spawning:");
    sb.append(this.spawning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("out:");
    if (this.out == null) {
      sb.append("null");
    } else {
      sb.append(this.out);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collisions:");
    if (this.collisions == null) {
      sb.append("null");
    } else {
      sb.append(this.collisions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connections:");
    if (this.connections == null) {
      sb.append("null");
    } else {
      sb.append(this.connections);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

